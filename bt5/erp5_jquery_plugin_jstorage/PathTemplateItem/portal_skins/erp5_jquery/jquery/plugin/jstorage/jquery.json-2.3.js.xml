<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="File" module="OFS.Image"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>_EtagSupport__etag</string> </key>
            <value> <string>ts33529183.71</string> </value>
        </item>
        <item>
            <key> <string>__name__</string> </key>
            <value> <string>jquery.json-2.3.js</string> </value>
        </item>
        <item>
            <key> <string>content_type</string> </key>
            <value> <string>application/javascript</string> </value>
        </item>
        <item>
            <key> <string>data</string> </key>
            <value> <string encoding="cdata"><![CDATA[

/**\n
 * jQuery JSON Plugin\n
 * version: 2.3 (2011-09-17)\n
 *\n
 * This document is licensed as free software under the terms of the\n
 * MIT License: http://www.opensource.org/licenses/mit-license.php\n
 *\n
 * Brantley Harris wrote this plugin. It is based somewhat on the JSON.org\n
 * website\'s http://www.json.org/json2.js, which proclaims:\n
 * "NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment that\n
 * I uphold.\n
 *\n
 * It is also influenced heavily by MochiKit\'s serializeJSON, which is\n
 * copyrighted 2005 by Bob Ippolito.\n
 */\n
\n
(function( $ ) {\n
\n
\tvar\tescapeable = /["\\\\\\x00-\\x1f\\x7f-\\x9f]/g,\n
\t\tmeta = {\n
\t\t\t\'\\b\': \'\\\\b\',\n
\t\t\t\'\\t\': \'\\\\t\',\n
\t\t\t\'\\n\': \'\\\\n\',\n
\t\t\t\'\\f\': \'\\\\f\',\n
\t\t\t\'\\r\': \'\\\\r\',\n
\t\t\t\'"\' : \'\\\\"\',\n
\t\t\t\'\\\\\': \'\\\\\\\\\'\n
\t\t};\n
\n
\t/**\n
\t * jQuery.toJSON\n
\t * Converts the given argument into a JSON respresentation.\n
\t *\n
\t * @param o {Mixed} The json-serializble *thing* to be converted\n
\t *\n
\t * If an object has a toJSON prototype, that will be used to get the representation.\n
\t * Non-integer/string keys are skipped in the object, as are keys that point to a\n
\t * function.\n
\t *\n
\t */\n
\t$.toJSON = typeof JSON === \'object\' && JSON.stringify\n
\t\t? JSON.stringify\n
\t\t: function( o ) {\n
\n
\t\tif ( o === null ) {\n
\t\t\treturn \'null\';\n
\t\t}\n
\n
\t\tvar type = typeof o;\n
\n
\t\tif ( type === \'undefined\' ) {\n
\t\t\treturn undefined;\n
\t\t}\n
\t\tif ( type === \'number\' || type === \'boolean\' ) {\n
\t\t\treturn \'\' + o;\n
\t\t}\n
\t\tif ( type === \'string\') {\n
\t\t\treturn $.quoteString( o );\n
\t\t}\n
\t\tif ( type === \'object\' ) {\n
\t\t\tif ( typeof o.toJSON === \'function\' ) {\n
\t\t\t\treturn $.toJSON( o.toJSON() );\n
\t\t\t}\n
\t\t\tif ( o.constructor === Date ) {\n
\t\t\t\tvar\tmonth = o.getUTCMonth() + 1,\n
\t\t\t\t\tday = o.getUTCDate(),\n
\t\t\t\t\tyear = o.getUTCFullYear(),\n
\t\t\t\t\thours = o.getUTCHours(),\n
\t\t\t\t\tminutes = o.getUTCMinutes(),\n
\t\t\t\t\tseconds = o.getUTCSeconds(),\n
\t\t\t\t\tmilli = o.getUTCMilliseconds();\n
\n
\t\t\t\tif ( month < 10 ) {\n
\t\t\t\t\tmonth = \'0\' + month;\n
\t\t\t\t}\n
\t\t\t\tif ( day < 10 ) {\n
\t\t\t\t\tday = \'0\' + day;\n
\t\t\t\t}\n
\t\t\t\tif ( hours < 10 ) {\n
\t\t\t\t\thours = \'0\' + hours;\n
\t\t\t\t}\n
\t\t\t\tif ( minutes < 10 ) {\n
\t\t\t\t\tminutes = \'0\' + minutes;\n
\t\t\t\t}\n
\t\t\t\tif ( seconds < 10 ) {\n
\t\t\t\t\tseconds = \'0\' + seconds;\n
\t\t\t\t}\n
\t\t\t\tif ( milli < 100 ) {\n
\t\t\t\t\tmilli = \'0\' + milli;\n
\t\t\t\t}\n
\t\t\t\tif ( milli < 10 ) {\n
\t\t\t\t\tmilli = \'0\' + milli;\n
\t\t\t\t}\n
\t\t\t\treturn \'"\' + year + \'-\' + month + \'-\' + day + \'T\' +\n
\t\t\t\t\thours + \':\' + minutes + \':\' + seconds +\n
\t\t\t\t\t\'.\' + milli + \'Z"\';\n
\t\t\t}\n
\t\t\tif ( o.constructor === Array ) {\n
\t\t\t\tvar ret = [];\n
\t\t\t\tfor ( var i = 0; i < o.length; i++ ) {\n
\t\t\t\t\tret.push( $.toJSON( o[i] ) || \'null\' );\n
\t\t\t\t}\n
\t\t\t\treturn \'[\' + ret.join(\',\') + \']\';\n
\t\t\t}\n
\t\t\tvar\tname,\n
\t\t\t\tval,\n
\t\t\t\tpairs = [];\n
\t\t\tfor ( var k in o ) {\n
\t\t\t\ttype = typeof k;\n
\t\t\t\tif ( type === \'number\' ) {\n
\t\t\t\t\tname = \'"\' + k + \'"\';\n
\t\t\t\t} else if (type === \'string\') {\n
\t\t\t\t\tname = $.quoteString(k);\n
\t\t\t\t} else {\n
\t\t\t\t\t// Keys must be numerical or string. Skip others\n
\t\t\t\t\tcontinue;\n
\t\t\t\t}\n
\t\t\t\ttype = typeof o[k];\n
\n
\t\t\t\tif ( type === \'function\' || type === \'undefined\' ) {\n
\t\t\t\t\t// Invalid values like these return undefined\n
\t\t\t\t\t// from toJSON, however those object members\n
\t\t\t\t\t// shouldn\'t be included in the JSON string at all.\n
\t\t\t\t\tcontinue;\n
\t\t\t\t}\n
\t\t\t\tval = $.toJSON( o[k] );\n
\t\t\t\tpairs.push( name + \':\' + val );\n
\t\t\t}\n
\t\t\treturn \'{\' + pairs.join( \',\' ) + \'}\';\n
\t\t}\n
\t};\n
\n
\t/**\n
\t * jQuery.evalJSON\n
\t * Evaluates a given piece of json source.\n
\t *\n
\t * @param src {String}\n
\t */\n
\t$.evalJSON = typeof JSON === \'object\' && JSON.parse\n
\t\t? JSON.parse\n
\t\t: function( src ) {\n
\t\treturn eval(\'(\' + src + \')\');\n
\t};\n
\n
\t/**\n
\t * jQuery.secureEvalJSON\n
\t * Evals JSON in a way that is *more* secure.\n
\t *\n
\t * @param src {String}\n
\t */\n
\t$.secureEvalJSON = typeof JSON === \'object\' && JSON.parse\n
\t\t? JSON.parse\n
\t\t: function( src ) {\n
\n
\t\tvar filtered = \n
\t\t\tsrc\n
\t\t\t.replace( /\\\\["\\\\\\/bfnrtu]/g, \'@\' )\n
\t\t\t.replace( /"[^"\\\\\\n\\r]*"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \']\')\n
\t\t\t.replace( /(?:^|:|,)(?:\\s*\\[)+/g, \'\');\n
\n
\t\tif ( /^[\\],:{}\\s]*$/.test( filtered ) ) {\n
\t\t\treturn eval( \'(\' + src + \')\' );\n
\t\t} else {\n
\t\t\tthrow new SyntaxError( \'Error parsing JSON, source is not valid.\' );\n
\t\t}\n
\t};\n
\n
\t/**\n
\t * jQuery.quoteString\n
\t * Returns a string-repr of a string, escaping quotes intelligently.\n
\t * Mostly a support function for toJSON.\n
\t * Examples:\n
\t * >>> jQuery.quoteString(\'apple\')\n
\t * "apple"\n
\t *\n
\t * >>> jQuery.quoteString(\'"Where are we going?", she asked.\')\n
\t * "\\"Where are we going?\\", she asked."\n
\t */\n
\t$.quoteString = function( string ) {\n
\t\tif ( string.match( escapeable ) ) {\n
\t\t\treturn \'"\' + string.replace( escapeable, function( a ) {\n
\t\t\t\tvar c = meta[a];\n
\t\t\t\tif ( typeof c === \'string\' ) {\n
\t\t\t\t\treturn c;\n
\t\t\t\t}\n
\t\t\t\tc = a.charCodeAt();\n
\t\t\t\treturn \'\\\\u00\' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);\n
\t\t\t}) + \'"\';\n
\t\t}\n
\t\treturn \'"\' + string + \'"\';\n
\t};\n
\n
})( jQuery );\n


]]></string> </value>
        </item>
        <item>
            <key> <string>precondition</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>size</string> </key>
            <value> <int>4712</int> </value>
        </item>
        <item>
            <key> <string>title</string> </key>
            <value> <string>Added for backwards compatability for IE6/7, add it to use jStorage with it</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
