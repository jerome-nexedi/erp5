<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""\n
  The release signature is a kind of declarative\n
  specification of an upgrader.\n
"""\n
\n
# Prevent unintended use of this script, as it would otherwise trigger an upgrade without possible site-specific settings.\n
raise Exception(\'This script is only an example. Copy, paste & customise it for your needs.\')\n
\n
# Alarm dict is used to enable/disable upgrade alarms.\n
\n
ALARM_DICT = {\n
 "bt5_upgrader" : True,\n
 "finalize_upgrader" : True\n
}\n
\n
# A list of bt5 which the upgrader can upgrade\n
#   ie. a bt5 not in this list will not be upgraded\n
#   by having an explicit list we can handle dedicate\n
#   and we can allow people to create some developer mode\n
#   stuff which they can control.\n
UPGRADABLE_BT5_ID_LIST = (\n
                        "erp5_core",\n
                        "erp5_mysql_innodb_catalog",\n
                        "erp5_xhtml_style",\n
                        "erp5_knowledge_pad",\n
                        "erp5_base",\n
                        "erp5_wizard",\n
                        "erp5_odt_style",\n
                        "erp5_ods_style",\n
                        "erp5_ingestion_mysql_innodb_catalog",\n
                        "erp5_ingestion",\n
                        "erp5_crm",\n
                        "erp5_web",\n
                        "erp5_dms",\n
                        "erp5_pdm",\n
                        "erp5_trade",\n
                        "erp5_accounting",\n
                        "erp5_invoicing",\n
                        "erp5_simplified_invoicing",\n
                        "tiolive_base",\n
                        "erp5_tax_resource",\n
                        "erp5_discount_resource",\n
                        "erp5_ooo_import",\n
                        "erp5_l10n_fr",\n
                        "erp5_l10n_ja",\n
                        "erp5_l10n_ko",\n
                        "erp5_l10n_pl_PL",\n
                        "erp5_l10n_pt-BR",\n
                        "erp5_accounting_l10n_ifrs",\n
                        "erp5_accounting_l10n_fr", \n
                        "erp5_accounting_l10n_sn",\n
                        "erp5_accounting_l10n_br_extend", \n
                        "erp5_mobile",\n
                        "erp5_ui_test_core",\n
                        "erp5_ui_test",\n
                        "erp5_jquery", \n
                        "erp5_jquery_ui", \n
                        "erp5_dhtml_style",\n
                        "erp5_configurator",\n
                        "erp5_configurator_standard",\n
                         )\n
\n
# A list bt5 which are required for the upgrade\n
#  ie. the upgrader will install them even\n
#  if they are not already installed\n
REQUIRED_BT5_ID_LIST = ()\n
\n
# A list bt5 which are required to upgrade catalog.\n
# After the bt5 be updated, update catalog will be trigger.\n
UPDATE_CATALOG_BT5_ID_LIST = ()\n
\n
# Call some scripts inside same transaction before or after BT update\n
BEFORE_TRIGGERED_BT5_SCRIPT_ID_DICT = {}\n
AFTER_TRIGGERED_BT5_SCRIPT_ID_DICT = {\'erp5_mysql_innodb_catalog\': (\'ERP5Site_updateSitePropertyForTestOnly\',)}\n
\n
# A list bt5 which require reinstallation\n
#   ie. the upgrader will call reinstall\n
#   on each of them and revert all local changes.\n
REINSTALLABLE_BT5_ID_LIST = ()\n
\n
# A snapshot of workflow chains which are known to be valid\n
#   this snapshot will be generated automatically from release\n
#   document in the future.\n
#\n
#   chains are exhaustive: they may contain more workflows that\n
#   installed workflows in a system (which is not perfect for\n
#   example in the case of -chains in bt5)\n
WORKFLOW_CHAIN_DICT = None\n
\n
# Portal Type definition based on portal_types_roles_express.sxc\n
# Once this document changes this script should be immediately \n
# updated to include or fix any security change.\n
\n
# Workflows whose security should be updated.\n
# To upgrade entire security use context.portal_workflow.objectIds()\n
# or [] to update None.\n
\n
UPDATE_SECURITY_WORKFLOW_ID_LIST = []\n
\n
# Portal Types to be updated using updateMappingDefinition.\n
# To upgrade entire security use context.portal_types.objectIds()\n
# or [] to update None.\n
\n
UPDATE_ROLE_PORTAL_TYPE_LIST = []\n
\n
# A property sheet expected to found into a Portal Type List.\n
# Example: (\'TradeOrder\', ["Sale Packing List", "Purchase Packing List"]),\n
PORTAL_TYPE_PROPERTY_SHEET_LIST = []\n
\n
# items to keep even if marked by BT5 to \'Remove\'\n
KEEP_ORIGINAL_DICT = {\n
  \'erp5_core\':(\'portal_preferences/default_site_preference\',\n
               \'portal_categories/function\',\n
              ),\n
\n
  \'erp5_dms\':(\'portal_workflow/processing_status_workflow\',\n
              \'portal_categories/contributor\',\n
              \'portal_skins/erp5_dms/Image_view/image_view\'\n
             ),\n
\n
  \'erp5_base\':(\'portal_categories/specialise\',\n
              ),\n
\n
  \'erp5_trade\':(\'portal_workflow/delivery_tax_interaction_workflow\',\n
                \'portal_workflow/tax_interaction_workflow\',\n
                \'tax_module\',\n
                \'discount_module\',\n
                \'portal_types/Discount\',\n
                \'portal_types/Discount Line\',\n
                \'portal_types/Discount Model Line\',\n
                \'portal_types/Discount Module\',\n
                \'portal_types/Tax\',\n
                \'portal_types/Tax Line\',\n
                \'portal_types/Tax Model Line\',\n
                \'portal_types/Tax Module\',),\n
\n
  \'erp5_invoicing\':(\'portal_workflow/delivery_movement_account_interaction_workflow\',\n
                ),\n
\n
  \'erp5_wizard\':(\'portal_preferences/erp5_express_default_customer_preference\',\n
                ),\n
\n
}\n
\n
# Items which need validation or change at upgrade time.\n
#   { BUSINESS_TEMPLATE_TITLE : (\n
#                  (OBJECT_PATH,\n
#                   SCRIPT TO COLLECT INFORMATION,\n
#                   RETURN EXPECTED THAT INDICATES THE OBJECT IS BROKEN,\n
#                   SCRIPT USED TO FIX , \n
#                   !OPTIONAL! PARAMETERS FOR THE SCRIPT AS A DICT),\n
#                  ),\n
#        }\n
OBJECT_ACTION_DICT = {\n
  \'erp5_base\':((\'portal_categories/group\', \'getValidationState\', \'draft\', \'embed\'),\n
               (\'portal_categories/site\', \'getValidationState\', \'draft\', \'embed\'),\n
              ),\n
\n
   \'erp5_knowledge_pad\': (# Make gadgets visible\n
                          (\'portal_gadgets/clock\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/erp5_advertisement\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/erp5_documentation\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/erp5_persons\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/erp5_rss\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/erp5_worklists\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/google_calendar\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/google_maps\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          (\'portal_gadgets/google_search\', \'getValidationState\',\'invisible\', \'visible\'),\n
                          # Make gadgets published\n
                          (\'portal_gadgets/clock\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/erp5_advertisement\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/erp5_documentation\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/erp5_persons\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/erp5_rss\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/erp5_worklists\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/google_calendar\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/google_maps\', \'getValidationState\',\'visible\', \'public\'),\n
                          (\'portal_gadgets/google_search\', \'getValidationState\',\'visible\', \'public\'),\n
                         ), \n
\n
  \'erp5_trade\':((\'portal_rules/default_order_rule\', \'getValidationState\',\'draft\', \'validate\'),\n
                (\'portal_rules/default_delivery_rule\', \'getValidationState\',\'draft\', \'validate\'),\n
               ),\n
  \'erp5_invoicing\':((\'portal_rules/default_invoice_transaction_rule\', \'getValidationState\',\'draft\', \'validate\'),\n
                    (\'portal_rules/default_invoicing_rule\', \'getValidationState\',\'draft\', \'validate\'),\n
                    (\'portal_rules/default_trade_model_rule\', \'getValidationState\',\'validated\', \'invalidate\'),\n
               ),\n
}\n
\n
#\n
# Dictionary the expected filters for catalog. This is a usually determinated\n
# by catalog.getFilterDict()\n
#\n
CATALOG_FILTER_DICT = None\n
\n
#\n
# List of Scripts to be run after upgrade is finished to determinate \n
# the integrity and consistency of the instance.\n
#\n
\n
INTEGRITY_VERIFICATION_SCRIPT_ID_LIST = (\'ERP5Site_verifyUpgradeIntegrity\',\n
                                         \'ERP5Site_verifyMemcachedIntegrity\',\n
                                         \'ERP5Site_verifySQLCatalogFilterIntegrity\',\n
                                         \'ERP5Site_verifyActivityIntegrity\')\n
\n
#\n
# List of Scripts to be sense and run after business template be upgraded. This can\n
# be consider as After methods.\n
  \n
FINALIZE_ALARM_SCRIPT = ( \'ERP5Site_upgradeGlobalPropertyList\',\n
                          \'ERP5Site_upgradeObjectList\',\n
                          \'ERP5Site_upgradeWorkflowChain\',\n
                          \'ERP5Site_upgradePortalTypePropertySheet\',\n
                          \'ERP5Site_upgradeSecurity\',\n
                          \'ERP5Site_upgradeObjectClass\',\n
                          \'ERP5Site_upgradeSQLCatalogFilter\',\n
                          \'ERP5Site_upgradeAlarmToolConfiguration\',\n
                          \'ERP5Site_upgradeSQLCatalog\',\n
                        )\n
\n
# \n
# Define the property and value ({\'property\' : \'value\', ...} to be set or created \n
# into erp5 portal object.\n
#\n
ERP5_SITE_PROPERTY_DICT = {}\n
\n
# \n
# Define alarm configuration list, which alarm will be enabled or\n
# disabled.\n
# Usage (("alarm_id", True or False ),) \n
ALARM_TOOL_CONFIGURATION_LIST = ()\n
\n
\n
#\n
# Define instructions for migrate object class of a group of objects like:\n
# ((    relative_url <- Folder Relative URL where the object is located.\n
#   , \'script_to_run_before\' <- Script ID that will test if the \n
#                               object can be migrated or not.\n
#   , \'Products.ERP5Type.Document.FROM.CLASS\' <- Expected Class to be migrated\n
#   , \'Products.ERP5Type.Document.TO.CLASS\'   <- Class to be Migrated.\n
#   , \'script_to_run_after\' <- Script ID that will run after test it finished.\n
# ), )\n
# \n
\n
UPGRADE_OBJECT_CLASS_LIST = ( (\'portal_gadgets\', \n
                          \'ERP5Site_testUpgradeObjectClass\',\n
                          \'Products.ERP5Type.Document.Folder.Folder\', \n
                          \'Products.ERP5Type.Document.Gadget.Gadget\', \n
                          \'ERP5Site_testUpgradeObjectClass\'  ), )\n
\n
RECATALOG = False\n
\n
# Wrap everything into a dict\n
signature_dict = {\n
   # Defines the alarms enabled for the upgrade\n
   \'alarm_dict\' : ALARM_DICT\n
   # Provides a snapshot of how workflow chains should be configured\n
 , \'workflow_chain_dict\': WORKFLOW_CHAIN_DICT\n
   # Provides a list of required bt5 (without which upgrader wont\'t work)\n
 , \'required_bt5_id_list\': REQUIRED_BT5_ID_LIST\n
   # Provides a list of bt5 which can be upgraded by the upgrader (if already installed)\n
 , \'upgradable_bt5_id_list\': UPGRADABLE_BT5_ID_LIST\n
 , \'update_catalog_bt5_id_list\' : UPDATE_CATALOG_BT5_ID_LIST\n
 , \'before_triggered_bt5_id_dict\': BEFORE_TRIGGERED_BT5_SCRIPT_ID_DICT\n
 , \'after_triggered_bt5_id_dict\': AFTER_TRIGGERED_BT5_SCRIPT_ID_DICT\n
   # Provide a list of bt5 which require reinstallation\n
 , \'reinstallable_bt5_id_list\': REINSTALLABLE_BT5_ID_LIST\n
   # Provides a list of bt5 path and items which must not be upgraded or deleted\n
 , \'keep_original_dict\': KEEP_ORIGINAL_DICT\n
   # Provides a list of bt5 path which require some action after upgrade\n
 , \'object_action_dict\': OBJECT_ACTION_DICT\n
   # Provides a list of script ids that will be run after the upgrade to check the Instance Integrity\n
 , \'integrity_verification_script_id_list\': INTEGRITY_VERIFICATION_SCRIPT_ID_LIST\n
   # Provides a list of script ids that will be run during finalization step\n
 , \'finalize_upgrade_script_list\': FINALIZE_ALARM_SCRIPT\n
   # Provides a dict with expected catalog filter expressions\n
 , \'catalog_filter_dict\': CATALOG_FILTER_DICT\n
   # Provides a list of workflow ids whose security should be updated.\n
 , \'update_security_workflow_id_list\': UPDATE_SECURITY_WORKFLOW_ID_LIST\n
   # Provides a list of portal types to had rules updated.\n
 , \'update_role_portal_type_list\': UPDATE_ROLE_PORTAL_TYPE_LIST\n
   # Provide a list of Property Sheet Expected into a portal type list\n
 , \'portal_type_property_sheet_list\' : PORTAL_TYPE_PROPERTY_SHEET_LIST\n
   # Provide a list of Properties Expected at ERP5Site portal\n
 , \'erp5_site_property_dict\' : ERP5_SITE_PROPERTY_DICT\n
   # Provide a list of tuples with informations to upgrade object class\n
 , \'upgrade_object_class_list\' : UPGRADE_OBJECT_CLASS_LIST\n
   # Define if the site will be recatalogued or not after finish upgrade.\n
 , \'recatalog\' : RECATALOG\n
   # Define which alarm should be enabled or disabled.\n
 , \'alarm_tool_configuration_list\' : ALARM_TOOL_CONFIGURATION_LIST\n
}\n
\n
if item is not None:\n
  return signature_dict.get(item, None)\n
else:\n
  return signature_dict\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>item=None</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>ERP5Site_getUpgraderSignature</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
