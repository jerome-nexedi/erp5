<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string>"""Guess a grouping references for lines whose uids are passed as\n
accounting_transaction_line_uid_list.\n
If accounting_transaction_line_uid_list is not passed, this script assumes that\n
it\'s called on the context of an accounting transaction and it guess the grouping\n
of related accounting transactions using causality.\n
"""\n
\n
from Products.ERP5Type.Utils import int2letter\n
\n
# this dict associates (node, section, mirror_section,\n
# extra_grouping_parameter) to a list of\n
# accounting lines info (total_price, date and path).\n
lines_per_node = {}\n
\n
portal = context.getPortalObject()\n
ctool = portal.portal_catalog\n
\n
allow_grouping_with_different_quantity = portal.portal_preferences.getPreference(\n
                                         \'preferred_grouping_with_different_quantities\', 0)\n
\n
\n
accounting_transaction_line_value_list = []\n
if accounting_transaction_line_uid_list is None:\n
  for accounting_transaction in context\\\n
        .AccountingTransaction_getCausalityGroupedAccountingTransactionList():\n
    if accounting_transaction.getSimulationState()  not in (\'stopped\', \'delivered\') and\\\n
                          accounting_transaction.getUid() != context.getUid():\n
      continue\n
    for line in accounting_transaction.getMovementList(\n
                            portal.getPortalAccountingMovementTypeList()):\n
      if line.getGroupingReference():\n
        continue\n
      accounting_transaction_line_value_list.append(line)\n
else:\n
  accounting_transaction_line_value_list = [ctool.getObject(uid) for uid in \n
                                        accounting_transaction_line_uid_list]\n
\n
for line in accounting_transaction_line_value_list:\n
  accounting_transaction = line.getParentValue()\n
  if accounting_transaction.AccountingTransaction_isSourceView():\n
    section_relative_url = None\n
    source_section = line.getSourceSectionValue(portal_type=\'Organisation\')\n
    if source_section is not None:\n
      source_section = \\\n
        source_section.Organisation_getMappingRelatedOrganisation()\n
      section_relative_url = source_section.getRelativeUrl()\n
    lines_per_node.setdefault(\n
                  (line.getSource(portal_type=\'Account\'),\n
                   section_relative_url,\n
                   line.getDestinationSection(),\n
                   line.AccountingTransactionLine_getGroupingExtraParameterList(source=True),\n
                   ), []).append(\n
      dict(total_price=line.getSourceInventoriatedTotalAssetPrice() or 0,\n
           date=line.getStartDate(),\n
           path=line.getRelativeUrl()))\n
  else:\n
    section_relative_url = None\n
    destination_section = line.getDestinationSectionValue(\n
                                    portal_type=\'Organisation\')\n
    if destination_section is not None:\n
      destination_section = \\\n
        destination_section.Organisation_getMappingRelatedOrganisation()\n
      section_relative_url = destination_section.getRelativeUrl()\n
    lines_per_node.setdefault(\n
              (line.getDestination(portal_type=\'Account\'),\n
               section_relative_url,\n
               line.getSourceSection(),\n
                   line.AccountingTransactionLine_getGroupingExtraParameterList(source=False),\n
               ), []).append(\n
    dict(total_price=line.getDestinationInventoriatedTotalAssetPrice() or 0,\n
         date=line.getStopDate(),\n
         path=line.getRelativeUrl()))\n
\n
changed_line_list = []\n
for (node, section, mirror_section, extra_parameter), line_info_list in lines_per_node.items():\n
  if node is None:\n
    continue\n
  total_price = sum([l[\'total_price\'] for l in line_info_list])\n
  # get the currency rounding for this section\n
  default_currency = None\n
  if section:\n
    section_obj = portal.restrictedTraverse(section)\n
    default_currency = section_obj.getPriceCurrencyValue()\n
  if default_currency is not None:\n
    total_price = round(total_price, default_currency.getQuantityPrecision())\n
  if total_price == 0 or allow_grouping_with_different_quantity:\n
    id_group = (\'grouping_reference\', node, section, mirror_section)\n
    previous_default = context.portal_ids.getLastGeneratedId(id_group=id_group, default=0)\n
    grouping_reference = portal.portal_ids.generateNewId(id_generator=\'uid\',\n
                                                  id_group=id_group,\n
                                                  default=previous_default + 1)\n
\n
    # convert from int to letters\n
    string_reference = int2letter(grouping_reference)\n
\n
    # get the grouping date\n
    date = max([line[\'date\'] for line in line_info_list])\n
\n
    for line in line_info_list:\n
      line_obj = portal.restrictedTraverse(line[\'path\'])\n
      line_obj.setGroupingReference(string_reference)\n
      line_obj.setGroupingDate(date)\n
      line_obj.reindexObject(activate_kw=dict(tag=\'accounting_grouping_reference\'))\n
      changed_line_list.append(line[\'path\'])\n
\n
return changed_line_list\n
</string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>accounting_transaction_line_uid_list=None</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountingTransaction_guessGroupedLines</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
