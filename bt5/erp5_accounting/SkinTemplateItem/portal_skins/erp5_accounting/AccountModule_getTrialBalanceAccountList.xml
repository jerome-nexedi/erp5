<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.ZSQLCatalog.SQLCatalog import Query\n
from Products.PythonScripts.standard import Object\n
from ZTUtils import LazyFilter\n
\n
request = container.REQUEST\n
portal = context.getPortalObject()\n
getInventoryList = portal.portal_simulation.getInventoryList\n
getInventory = portal.portal_simulation.getInventoryAssetPrice\n
traverse = context.getPortalObject().restrictedTraverse\n
getObject = context.getPortalObject().portal_catalog.getObject\n
Base_translateString = portal.Base_translateString\n
selected_gap = gap_root\n
\n
inventory_movement_type_list = portal.getPortalInventoryMovementTypeList()\n
# Balance Movement Type list is all movements that are both inventory movement\n
# and accounting movement\n
balance_movement_type_list = [ t for t in\n
                               portal.getPortalAccountingMovementTypeList()\n
                               if t in inventory_movement_type_list ]\n
\n
accounting_movement_type_list = [ t for t in\n
                                  portal.getPortalAccountingMovementTypeList()\n
                                  if t not in balance_movement_type_list ]\n
\n
inventory_params = dict(section_uid=section_uid,\n
                        simulation_state=simulation_state,\n
                        precision=precision,\n
                        group_by_resource=0)\n
\n
if group_analytic:\n
  inventory_params[\'group_by\'] = group_analytic\n
  group_analytic = tuple(group_analytic)\n
\n
if portal_type and portal_type != portal.getPortalAccountingTransactionTypeList():\n
  inventory_params[\'parent_portal_type\'] = portal_type\n
if function:\n
  if function == \'None\':\n
    inventory_params[\'function_uid\'] = Query(function_uid=None)\n
  else:\n
    inventory_params[\'function_category\'] = function\n
if funding:\n
  if funding == \'None\':\n
    inventory_params[\'funding_uid\'] = Query(funding_uid=None)\n
  else:\n
    inventory_params[\'funding_category\'] = funding\n
if project:\n
  if project == \'None\':\n
    inventory_params[\'project_uid\'] = Query(project_uid=None)\n
  else:\n
    inventory_params[\'project\'] = project\n
if mirror_section_category:\n
  inventory_params[\'mirror_section_category\'] = mirror_section_category\n
\n
if node_uid:\n
  inventory_params[\'node_uid\'] = node_uid\n
\n
MARKER = Object()\n
\n
# a dictionary (node_relative_url, mirror_section_uid, payment_uid + analytic)\n
#                        -> dict(debit=, credit=)\n
line_per_account = {}\n
# a dictionnary node_relative_url -> boolean "do we have transactions for this\n
# account ?"\n
account_used = {}\n
\n
account_type = portal.portal_categories.account_type\n
balance_sheet_account_type_list = [c[0] for c in \n
 account_type.asset.getCategoryChildItemList(base=1, is_self_excluded=False, display_none_category=False ) + \\\n
 account_type.equity.getCategoryChildItemList(base=1, is_self_excluded=False, display_none_category=False) + \\\n
 account_type.liability.getCategoryChildItemList(base=1, is_self_excluded=False, display_none_category=False) ]\n
\n
profit_and_loss_account_type = [\n
                  \'account_type/expense\',\n
                  \'account_type/income\',]\n
\n
account_type_to_group_by_payment = [ \'account_type/asset/cash/bank\' ]\n
\n
account_type_payable_receivable = [\n
                  \'account_type/asset/receivable\',\n
                  \'account_type/liability/payable\', ]\n
if expand_accounts:\n
  account_type_to_group_by_mirror_section = account_type_payable_receivable\n
else:\n
  account_type_to_group_by_mirror_section = []\n
\n
account_type_to_group_by_node = [at for at in balance_sheet_account_type_list\n
  if at not in account_type_to_group_by_payment\n
  and at not in account_type_to_group_by_mirror_section]\n
\n
account_type_to_group_by_node_previous_period = [at for at in account_type_to_group_by_node if at not in account_type_payable_receivable]\n
\n
\n
total_debit = 0\n
total_credit = 0\n
total_initial_debit_balance = 0\n
total_initial_credit_balance = 0\n
total_final_balance_if_debit = 0\n
total_final_balance_if_credit = 0\n
\n
def getKey(brain, mirror_section=MARKER, payment=MARKER, all_empty=False):\n
  key = (brain[\'node_relative_url\'],\n
         mirror_section,\n
         payment)\n
  for analytic in group_analytic:\n
    if all_empty:\n
      key += (MARKER, )\n
    elif hasattr(brain, analytic):\n
      key += (getattr(brain, analytic), )\n
    else:\n
      key += (brain.getObject().getProperty(analytic.replace(\'strict_\', \'\', 1)), )\n
  return key\n
\n
analytic_title_dict = {None: \'\', }\n
def getAnalyticTitleFromUid(uid):\n
  if uid is MARKER:\n
    return \'\'\n
  try:\n
    return analytic_title_dict[uid]\n
  except KeyError:\n
    node = getObject(uid)\n
    title = node.getTranslatedTitle()\n
    reference = node.getReference()\n
    if reference:\n
      title = \'%s - %s\' % (reference, title)\n
    return analytic_title_dict.setdefault(uid, title)\n
\n
# standards accounts {{{\n
for node in getInventoryList(\n
                node_category_strict_membership=account_type_to_group_by_node,\n
                group_by_node=1,\n
                omit_asset_decrease=1,\n
                from_date=from_date,\n
                at_date=at_date,\n
                portal_type=accounting_movement_type_list,\n
                **inventory_params):\n
  account_used[node[\'node_relative_url\']] = 1\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'debit\'] = total_price\n
  total_debit += round(total_price, precision)\n
\n
for node in getInventoryList(\n
                node_category_strict_membership=account_type_to_group_by_node,\n
                group_by_node=1,\n
                omit_asset_increase=1,\n
                from_date=from_date,\n
                at_date=at_date,\n
                portal_type=accounting_movement_type_list,\n
                **inventory_params):\n
  account_used[node[\'node_relative_url\']] = 1\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'credit\'] = -total_price\n
  total_credit -= round(total_price, precision)\n
# }}}\n
\n
### profit & loss accounts {{{\n
for node in getInventoryList(\n
                node_category=profit_and_loss_account_type,\n
                from_date=max(period_start_date, from_date),\n
                group_by_node=1,\n
                omit_asset_decrease=1,\n
                at_date=at_date,\n
                portal_type=accounting_movement_type_list,\n
                **inventory_params):\n
  account_used[node[\'node_relative_url\']] = 1\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'debit\'] = total_price\n
  total_debit += round(total_price, precision)\n
\n
for node in getInventoryList(\n
                node_category=profit_and_loss_account_type,\n
                from_date=max(period_start_date, from_date),\n
                group_by_node=1,\n
                omit_asset_increase=1,\n
                at_date=at_date,\n
                portal_type=accounting_movement_type_list,\n
                **inventory_params):\n
  account_used[node[\'node_relative_url\']] = 1\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'credit\'] = -total_price\n
  total_credit -= round(total_price, precision)\n
# }}}\n
\n
# payable / receivable accounts {{{\n
if account_type_to_group_by_mirror_section:\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_mirror_section,\n
                  group_by_mirror_section=1,\n
                  group_by_node=1,\n
                  omit_asset_decrease=1,\n
                  from_date=from_date,\n
                  at_date=at_date,\n
                  portal_type=accounting_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, mirror_section=node[\'mirror_section_uid\']),\n
          dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'debit\'] = total_price\n
    total_debit += round(total_price, precision)\n
\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_mirror_section,\n
                  group_by_mirror_section=1,\n
                  group_by_node=1,\n
                  omit_asset_increase=1,\n
                  from_date=from_date,\n
                  at_date=at_date,\n
                  portal_type=accounting_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, mirror_section=node[\'mirror_section_uid\']),\n
          dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'credit\'] = - total_price\n
    total_credit -= round(total_price, precision)\n
# }}}\n
\n
# bank accounts {{{\n
if account_type_to_group_by_payment:\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_payment,\n
                  group_by_payment=1,\n
                  group_by_node=1,\n
                  omit_asset_decrease=1,\n
                  from_date=from_date,\n
                  at_date=at_date,\n
                  portal_type=accounting_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, payment=node[\'payment_uid\']),\n
          dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'debit\'] = total_price\n
    total_debit += round(total_price, precision)\n
\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_payment,\n
                  group_by_payment=1,\n
                  group_by_node=1,\n
                  omit_asset_increase=1,\n
                  from_date=from_date,\n
                  at_date=at_date,\n
                  portal_type=accounting_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, payment=node[\'payment_uid\']),\n
          dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'credit\'] = - total_price\n
    total_credit -= round(total_price, precision)\n
  # }}}\n
\n
\n
node_title_and_id_cache = {}\n
def getNodeTitleAndId(node_relative_url):\n
  try:\n
    return node_title_and_id_cache[node_relative_url]\n
  except KeyError:\n
    node = traverse(node_relative_url)\n
    return node_title_and_id_cache.setdefault(node_relative_url,\n
                  ( node.getUid(),\n
                    node.getTitle(),\n
                    node.Account_getGapId(gap_root=selected_gap),\n
                    node.getProperty(\'string_index\'),\n
                    node))\n
\n
# include all accounts, even those not selected before (no movements in the\n
# period)\n
for node in LazyFilter(context.account_module.contentValues(), skip=\'\'):\n
  if node.getRelativeUrl() not in account_used:\n
    line_per_account.setdefault(\n
          getKey(dict(node_relative_url=node.getRelativeUrl()), all_empty=True),\n
          dict(debit=0, credit=0))\n
\n
initial_balance_date = (from_date - 1).latestTime()\n
\n
# Initial Balance\n
\n
# standards accounts {{{\n
# balance at period start date\n
for node in getInventoryList(\n
                node_category_strict_membership=\n
                   account_type_to_group_by_node_previous_period,\n
                group_by_node=1,\n
                to_date=period_start_date,\n
                portal_type=accounting_movement_type_list +\n
                              balance_movement_type_list,\n
                **inventory_params):\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_debit_balance\'] = account_props.get(\n
              \'initial_debit_balance\', 0) + max(total_price, 0)\n
  account_props[\'initial_credit_balance\'] = account_props.get(\n
              \'initial_credit_balance\', 0) + max(- total_price, 0)\n
\n
found_balance = False\n
# Balance Transaction\n
for node in getInventoryList(\n
                node_category_strict_membership=\n
                   account_type_to_group_by_node_previous_period,\n
                group_by_node=1,\n
                from_date=from_date,\n
                at_date=from_date + 1,\n
                portal_type=balance_movement_type_list,\n
                **inventory_params):\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_debit_balance\'] = account_props.get(\n
              \'initial_debit_balance\', 0) + max(total_price, 0)\n
  account_props[\'initial_credit_balance\'] = account_props.get(\n
              \'initial_credit_balance\', 0) + max(- total_price, 0)\n
  found_balance = True\n
\n
period_movement_type_list = accounting_movement_type_list\n
if not found_balance:\n
  period_movement_type_list = accounting_movement_type_list +\\\n
      balance_movement_type_list\n
\n
for node in getInventoryList(\n
                node_category_strict_membership=\n
                          account_type_to_group_by_node,\n
                group_by_node=1,\n
                omit_asset_decrease=1,\n
                from_date=period_start_date,\n
                to_date=from_date,\n
                portal_type=period_movement_type_list,\n
                **inventory_params):\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_debit_balance\'] = account_props.get(\n
                    \'initial_debit_balance\', 0) + total_price\n
\n
for node in getInventoryList(\n
                node_category_strict_membership=\n
                          account_type_to_group_by_node,\n
                group_by_node=1,\n
                omit_asset_increase=1,\n
                from_date=period_start_date,\n
                to_date=from_date,\n
                portal_type=period_movement_type_list,\n
                **inventory_params):\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_credit_balance\'] = account_props.get(\n
                    \'initial_credit_balance\', 0) - total_price\n
# }}}\n
\n
### profit & loss accounts {{{\n
for node in getInventoryList(\n
                node_category=profit_and_loss_account_type,\n
                omit_asset_decrease=1,\n
                from_date=min(period_start_date,\n
                              initial_balance_date),\n
                at_date=initial_balance_date,\n
                group_by_node=1,\n
                portal_type=accounting_movement_type_list,\n
                **inventory_params):\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_debit_balance\'] = account_props.get(\n
                    \'initial_debit_balance\', 0) + total_price\n
\n
for node in getInventoryList(\n
                node_category=profit_and_loss_account_type,\n
                omit_asset_increase=1,\n
                from_date=min(period_start_date,\n
                              initial_balance_date),\n
                at_date=initial_balance_date,\n
                group_by_node=1,\n
                portal_type=accounting_movement_type_list,\n
                **inventory_params):\n
  account_props = line_per_account.setdefault(getKey(node), dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_credit_balance\'] = account_props.get(\n
                    \'initial_credit_balance\', 0) - total_price\n
# }}}\n
\n
# payable / receivable accounts {{{\n
# initial balance\n
for node in getInventoryList(\n
                node_category_strict_membership=account_type_payable_receivable,\n
                group_by_mirror_section=1,\n
                group_by_node=1,\n
                to_date=period_start_date,\n
                portal_type=accounting_movement_type_list +\n
                              balance_movement_type_list,\n
                **inventory_params):\n
  mirror_section_key = MARKER\n
  if expand_accounts:\n
    mirror_section_key = node[\'mirror_section_uid\']\n
  \n
  account_props = line_per_account.setdefault(\n
                    getKey(node, mirror_section=mirror_section_key),\n
                           dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_debit_balance\'] = account_props.get(\n
                  \'initial_debit_balance\', 0) + max(total_price, 0)\n
  account_props[\'initial_credit_balance\'] = account_props.get(\n
                 \'initial_credit_balance\', 0) + max(-total_price, 0)\n
\n
found_balance=False\n
# Balance Transactions\n
for node in getInventoryList(\n
                node_category_strict_membership=account_type_payable_receivable,\n
                group_by_mirror_section=1,\n
                group_by_node=1,\n
                from_date=from_date,\n
                at_date=from_date + 1,\n
                portal_type=balance_movement_type_list,\n
                **inventory_params):\n
  mirror_section_key = MARKER\n
  if expand_accounts:\n
    mirror_section_key = node[\'mirror_section_uid\']\n
  account_props = line_per_account.setdefault(\n
          getKey(node, mirror_section=mirror_section_key),\n
                 dict(debit=0, credit=0))\n
  total_price = node[\'total_price\'] or 0\n
  account_props[\'initial_debit_balance\'] = account_props.get(\n
              \'initial_debit_balance\', 0) + max(total_price, 0)\n
  account_props[\'initial_credit_balance\'] = account_props.get(\n
              \'initial_credit_balance\', 0) + max(- total_price, 0)\n
  found_balance=True\n
\n
\n
period_movement_type_list = accounting_movement_type_list\n
if not found_balance:\n
  period_movement_type_list = accounting_movement_type_list +\\\n
      balance_movement_type_list\n
\n
\n
if expand_accounts:\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_mirror_section,\n
                  group_by_mirror_section=1,\n
                  group_by_node=1,\n
                  omit_asset_decrease=1,\n
                  from_date=period_start_date,\n
                  to_date=from_date,\n
                  portal_type=period_movement_type_list,\n
                  **inventory_params):\n
    account_props = line_per_account.setdefault(\n
          getKey(node, mirror_section=node[\'mirror_section_uid\']),\n
                 dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'initial_debit_balance\'] = account_props.get(\n
                      \'initial_debit_balance\', 0) + total_price\n
\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_mirror_section,\n
                  group_by_mirror_section=1,\n
                  group_by_node=1,\n
                  omit_asset_increase=1,\n
                  from_date=period_start_date,\n
                  to_date=from_date,\n
                  portal_type=period_movement_type_list,\n
                  **inventory_params):\n
    account_props = line_per_account.setdefault(\n
          getKey(node, mirror_section=node[\'mirror_section_uid\']),\n
                 dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'initial_credit_balance\'] = account_props.get(\n
                      \'initial_credit_balance\', 0) - total_price\n
# }}}\n
\n
# bank accounts {{{\n
if account_type_to_group_by_payment:\n
  # Initial balance\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_payment,\n
                  group_by_payment=1,\n
                  group_by_node=1,\n
                  to_date=period_start_date,\n
                  portal_type=accounting_movement_type_list +\n
                                balance_movement_type_list,\n
                  **inventory_params):\n
    account_props = line_per_account.setdefault(\n
          getKey(node, payment=node[\'payment_uid\']),\n
                 dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'initial_debit_balance\'] = account_props.get(\n
                    \'initial_debit_balance\', 0) + max(total_price, 0)\n
    account_props[\'initial_credit_balance\'] = account_props.get(\n
                   \'initial_credit_balance\', 0) + max(- total_price, 0)\n
\n
  found_balance = False\n
  # Balance Transaction\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_payment,\n
                  group_by_payment=1,\n
                  group_by_node=1,\n
                  from_date=from_date,\n
                  at_date=from_date + 1,\n
                  portal_type=balance_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, payment=node[\'payment_uid\']),\n
                 dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    total_price += account_props.get(\'initial_debit_balance\', 0)\n
    total_price -= account_props.get(\'initial_credit_balance\', 0)\n
    account_props[\'initial_debit_balance\'] = max(total_price, 0)\n
    account_props[\'initial_credit_balance\'] = max(- total_price, 0)\n
    found_balance = True\n
\n
  period_movement_type_list = accounting_movement_type_list\n
  if not found_balance:\n
    period_movement_type_list = accounting_movement_type_list +\\\n
        balance_movement_type_list\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_payment,\n
                  group_by_payment=1,\n
                  group_by_node=1,\n
                  omit_asset_decrease=1,\n
                  from_date=period_start_date,\n
                  to_date=from_date,\n
                  portal_type=period_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, payment=node[\'payment_uid\']),\n
                 dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'initial_debit_balance\'] = account_props.get(\n
                      \'initial_debit_balance\', 0) + total_price\n
\n
  for node in getInventoryList(\n
                  node_category_strict_membership=\n
                          account_type_to_group_by_payment,\n
                  group_by_payment=1,\n
                  group_by_node=1,\n
                  omit_asset_increase=1,\n
                  from_date=period_start_date,\n
                  to_date=from_date,\n
                  portal_type=period_movement_type_list,\n
                  **inventory_params):\n
    account_used[node[\'node_relative_url\']] = 1\n
    account_props = line_per_account.setdefault(\n
          getKey(node, payment=node[\'payment_uid\']),\n
                 dict(debit=0, credit=0))\n
    total_price = node[\'total_price\'] or 0\n
    account_props[\'initial_credit_balance\'] = account_props.get(\n
                      \'initial_credit_balance\', 0) - total_price\n
  # }}}\n
\n
line_list = []\n
for key, data in line_per_account.items():\n
  node_relative_url = key[0]\n
  mirror_section_uid = key[1]\n
  payment_uid = key[2]\n
  analytic_key_list = key[3:]\n
\n
  mirror_section_title = None\n
  if expand_accounts and mirror_section_uid is not MARKER:\n
    mirror_section_title = getObject(mirror_section_uid).getTitle()\n
\n
  node_uid, node_title, node_id, node_string_index, node =\\\n
          getNodeTitleAndId(node_relative_url)\n
\n
  if selected_gap and not node.isMemberOf(selected_gap):\n
    continue\n
\n
  if payment_uid is not MARKER:\n
    if payment_uid is None:\n
      node_title = \'%s (%s)\' % ( node_title, Base_translateString(\'None\'))\n
    else:\n
      payment = getObject(payment_uid)\n
      node_title = "%s (%s)" % ( node_title, payment.getTitle() )\n
\n
  if not node_string_index:\n
    node_string_index = \'%-10s\' % node_id\n
\n
  initial_debit_balance = data.get(\'initial_debit_balance\', 0)\n
  initial_credit_balance = data.get(\'initial_credit_balance\', 0)\n
\n
  total_initial_debit_balance += round(initial_debit_balance, precision)\n
  total_initial_credit_balance += round(initial_credit_balance, precision)\n
  final_debit_balance = round(initial_debit_balance + data[\'debit\'],\n
                              precision)\n
  final_credit_balance = round(initial_credit_balance + data[\'credit\'],\n
                               precision)\n
  closing_balance = final_debit_balance - final_credit_balance\n
  total_final_balance_if_debit += round(max(closing_balance, 0), precision)\n
  total_final_balance_if_credit += round(max(-closing_balance, 0) or 0, precision)\n
  \n
  \n
  line = Object(uid=\'new_\',\n
                node_id=node_id,\n
                node_title=node_title,\n
                mirror_section_title=mirror_section_title,\n
                node_relative_url=node_relative_url,\n
                initial_debit_balance=initial_debit_balance,\n
                initial_credit_balance=initial_credit_balance,\n
                debit=data[\'debit\'],\n
                credit=data[\'credit\'],\n
                final_debit_balance=final_debit_balance,\n
                final_credit_balance=final_credit_balance,\n
                final_balance_if_debit=max(closing_balance, 0),\n
                final_balance_if_credit=max(-closing_balance, 0) or 0,)\n
\n
  sort_key = (node_string_index, node_title, mirror_section_title)\n
  analytic_dict = dict()\n
  for analytic, uid in zip(group_analytic, analytic_key_list):\n
    title = getAnalyticTitleFromUid(uid)\n
    analytic_dict[analytic] = title\n
    sort_key += (title, )\n
\n
  analytic_dict[\'sort_key\'] = sort_key\n
  line.update(analytic_dict)\n
\n
  line_list.append(line)\n
  \n
\n
if not show_empty_accounts:\n
  line_list = [ line for line in line_list\n
                if line[\'debit\'] or\n
                   line[\'credit\'] or\n
                   line[\'initial_credit_balance\'] or\n
                   line[\'initial_debit_balance\'] ]\n
\n
line_list.sort(key=lambda obj:obj[\'sort_key\'])\n
\n
# cache values for stat\n
request.set(\'TrialBalance.total_initial_debit_balance\',\n
            total_initial_debit_balance)\n
request.set(\'TrialBalance.total_initial_credit_balance\',\n
            total_initial_credit_balance)\n
request.set(\'TrialBalance.debit\', total_debit)\n
request.set(\'TrialBalance.credit\', total_credit)\n
request.set(\'TrialBalance.final_balance_if_debit\', total_final_balance_if_debit)\n
request.set(\'TrialBalance.final_balance_if_credit\', total_final_balance_if_credit)\n
\n
if not per_account_class_summary:\n
  return line_list\n
\n
current_gap = selected_gap or \\\n
                 portal.portal_preferences.getPreferredAccountingTransactionGap() or \'\'\n
if current_gap.startswith(\'gap/\'):\n
  current_gap = current_gap[4:]\n
def getAccountClass(account_relative_url):\n
  account = traverse(account_relative_url)\n
  for gap in account.getGapList():\n
    if gap.startswith(current_gap):\n
     gap_part_list = gap.split(\'/\')\n
     # country / accounting principle / ${class}\n
     if len(gap_part_list) > 2:\n
       return gap_part_list[2]\n
  return None # this account has no class on the current GAP  \n
\n
new_line_list = []\n
account_per_class = dict()\n
for brain in line_list:\n
  account_per_class.setdefault(\n
      getAccountClass(brain.node_relative_url), []).append(brain)\n
\n
account_class_list = account_per_class.keys()\n
account_class_list.sort()\n
\n
add_line = new_line_list.append\n
for account_class in account_class_list:\n
  initial_debit_balance = 0\n
  debit = 0\n
  final_debit_balance = 0\n
  initial_credit_balance = 0\n
  credit = 0\n
  final_credit_balance = 0\n
  final_balance_if_debit = 0\n
  final_balance_if_credit = 0\n
\n
  for account in account_per_class[account_class]:\n
    initial_debit_balance += account.initial_debit_balance\n
    debit += account.debit\n
    final_debit_balance += account.final_debit_balance\n
    initial_credit_balance += account.initial_credit_balance\n
    credit += account.credit\n
    final_credit_balance += account.final_credit_balance\n
    final_balance_if_debit += account.final_balance_if_debit\n
    final_balance_if_credit += account.final_balance_if_credit\n
    add_line(account)\n
    \n
  # summary\n
  add_line(Object(node_title=Base_translateString(\'Total for class ${account_class}\',\n
                   mapping=dict(account_class=account_class or \'???\')),\n
          initial_debit_balance=round(initial_debit_balance, precision),\n
          debit=round(debit, precision),\n
          final_debit_balance=round(final_debit_balance, precision),\n
          initial_credit_balance=round(initial_credit_balance, precision),\n
          credit=round(credit, precision),\n
          final_credit_balance=round(final_credit_balance, precision),\n
          final_balance_if_debit=round(final_balance_if_debit, precision),\n
          final_balance_if_credit=round(final_balance_if_credit, precision),))\n
\n
  add_line(Object(node_title=\' \'))\n
\n
return new_line_list\n
# vim: foldmethod=marker\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>show_empty_accounts, expand_accounts, at_date, from_date, period_start_date, section_uid, simulation_state, precision, node_uid, gap_root=None, per_account_class_summary=0, portal_type=None, function=None, funding=None, project=None, group_analytic=[], mirror_section_category=None, **kw</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountModule_getTrialBalanceAccountList</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
