<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

"""Get the report sections for general ledger\n
"""\n
from Products.ZSQLCatalog.SQLCatalog import Query, ComplexQuery\n
from Products.ERP5Form.Report import ReportSection\n
portal   = context.portal_url.getPortalObject()\n
request  = portal.REQUEST\n
cat_tool = portal.portal_categories\n
Base_translateString = portal.Base_translateString\n
\n
at_date             = request[\'at_date\']\n
section_category    = request[\'section_category\']\n
section_uid = context.Base_getSectionUidListForSectionCategory(\n
                        section_category, request[\'section_category_strict\'])\n
simulation_state    = request[\'simulation_state\']\n
hide_analytic  = request[\'hide_analytic\']\n
from_date           = request.get(\'from_date\', None)\n
mirror_section_category_list = request.get(\'mirror_section_category_list\',\n
                                            None)\n
mirror_section = request.get(\'mirror_section\', None)\n
\n
gap_list = []\n
for gap in request.get(\'gap_list\', ()):\n
  # XXX the field should maybe use base=1 on the category, but it is also used in other contexts\n
  gap_list.append(\'gap/%s\' % gap)\n
\n
display_categories  = request.get(\'display_categories\', False)\n
period_start_date = context\\\n
    .Base_getAccountingPeriodStartDateForSectionCategory(\n
          section_category=section_category, date=from_date or at_date)\n
gap_root = request.get(\'gap_root\')\n
\n
\n
# currency precision\n
currency = portal.Base_getCurrencyForSection(request[\'section_category\'])\n
precision = portal.account_module.getQuantityPrecisionFromResource(currency)\n
request.set(\'precision\', precision)\n
\n
request.other[\'is_accounting_report\'] = True\n
\n
params = dict(precision=precision,\n
              section_uid=section_uid,\n
              simulation_state=simulation_state,\n
              period_start_date=period_start_date,\n
              movement_portal_type=portal.getPortalAccountingMovementTypeList(),\n
              no_mirror_section_uid_cache=1,\n
              hide_grouping=request.get(\'omit_grouping_reference\', False))\n
project = request.get(\'project\')\n
if project:\n
  if project == \'None\':\n
    params[\'project_uid\'] = Query(project_uid=None)\n
  else:\n
    params[\'project_uid\'] = portal.portal_categories.restrictedTraverse(project).getUid()\n
funding_category = request.get(\'funding\')\n
if funding_category:\n
  if funding_category == \'None\':\n
    params[\'funding_uid\'] = Query(funding_uid=None)\n
  else:\n
    funding_value = portal.restrictedTraverse(funding_category, None)\n
    if funding_value is not None and funding_value.getPortalType() != \'Category\':\n
      params[\'funding_uid\'] = funding_value.getUid()\n
    else:\n
      params[\'funding_category\'] = funding_category\n
\n
function_category = request.get(\'function\')\n
if function_category:\n
  if function_category == \'None\':\n
    params[\'function_uid\'] = Query(function_uid=None)\n
  else:\n
    function_value = portal.restrictedTraverse(function_category, None)\n
    if function_value is not None and function_value.getPortalType() != \'Category\':\n
      params[\'function_uid\'] = function_value.getUid()\n
    else:\n
      params[\'function_category\'] = function_category\n
\n
if mirror_section:\n
  mirror_section_uid = portal.restrictedTraverse(mirror_section).getUid()\n
  params[\'mirror_section_uid\'] = mirror_section_uid\n
\n
default_selection_params = params.copy()\n
\n
# if user request report without grouping reference, don\'t show accounts that only have grouped lines in the period.\n
if request.get(\'omit_grouping_reference\', False):\n
  if at_date:\n
    params[\'grouping_query\'] = ComplexQuery(\n
      Query(grouping_reference=None),\n
      Query(grouping_date=at_date, range="min"),\n
      operator="OR")\n
  else:\n
    params[\'grouping_reference\'] = None\n
\n
\n
analytic_column_list = ()\n
if hide_analytic:\n
  default_selection_params[\'group_by\'] = ( \'explanation_uid\',\n
                                           \'mirror_section_uid\',\n
                                           \'payment_uid\' )\n
else:\n
  analytic_column_list = context.accounting_module.AccountModule_getAnalyticColumnList()\n
\n
account_columns = (\n
      (\'Movement_getSpecificReference\', \'Reference\'),\n
      (\'Movement_getExplanationTitle\', \'Title\'),\n
      (\'date\', \'Date\'),\n
      (\'Movement_getExplanationTranslatedPortalType\', \'Type\'),\n
      (\'Movement_getExplanationReference\', \'Document Reference\'),\n
      (\'Movement_getMirrorSectionTitle\', \'Third Party\'),)\n
if len(simulation_state) > 1:\n
  account_columns += (\n
      (\'getTranslatedSimulationStateTitle\', \'State\'),)\n
account_columns += analytic_column_list\n
account_columns += (\n
      (\'debit_price\', \'Debit\'),\n
      (\'credit_price\', \'Credit\'),\n
      (\'running_total_price\', \'Net\'), )\n
\n
# utility functions\n
traverse = portal.restrictedTraverse\n
account_name_cache = {}\n
def getAccountName(account_relative_url):\n
  try:\n
    return account_name_cache[account_relative_url]\n
  except KeyError:\n
    name = traverse(account_relative_url).Account_getFormattedTitle(gap_root=gap_root)\n
    account_name_cache[account_relative_url] = name\n
    return name\n
\n
getObject = portal.portal_catalog.getObject\n
\n
title_for_uid_cache = {}\n
def getTitleForUid(uid):\n
  try:\n
    return title_for_uid_cache[uid]\n
  except KeyError:\n
    name = \'\'\n
    if uid:\n
      document = getObject(uid)\n
      if document is not None:\n
        name = document.getTitle()\n
    title_for_uid_cache[uid] = name\n
    return name\n
\n
def getFullAccountName(account_info):\n
  account_relative_url, mirror_section_uid, payment_uid = account_info\n
  account_name = getAccountName(account_relative_url)\n
  mirror_section_name = getTitleForUid(mirror_section_uid)\n
  if mirror_section_name:\n
    account_name = \'%s (%s)\' % (account_name, mirror_section_name)\n
  payment_name = getTitleForUid(payment_uid)\n
  if payment_name:\n
    account_name = \'%s (%s)\' % (account_name, payment_name)\n
  return account_name\n
\n
\n
\n
# look at inventories to decide which sections will be shown\n
balance_sheet_account_type_list = [c[0] for c in\n
 cat_tool.account_type.asset.getCategoryChildItemList(base=1, is_self_excluded=False, display_none_category=False ) + \\\n
 cat_tool.account_type.equity.getCategoryChildItemList(base=1, is_self_excluded=False, display_none_category=False) + \\\n
 cat_tool.account_type.liability.getCategoryChildItemList(base=1, is_self_excluded=False, display_none_category=False) ]\n
\n
profit_and_loss_account_type = []\n
for account_type_value in (cat_tool.account_type.expense,\n
                     cat_tool.account_type.income):\n
  profit_and_loss_account_type.extend(\n
      [category.getRelativeUrl() for category in\n
        account_type_value.getIndexableChildValueList()])\n
\n
account_type_to_group_by_payment = [ \'account_type/asset/cash/bank\' ]\n
\n
account_type_to_group_by_mirror_section = [\n
                  \'account_type/asset/receivable\',\n
                  \'account_type/liability/payable\', ]\n
\n
account_type_to_group_by_node = [at for at in balance_sheet_account_type_list\n
  if at not in account_type_to_group_by_payment\n
  and at not in account_type_to_group_by_mirror_section]\n
\n
if gap_list or gap_root:\n
  params[\'node_category\'] = gap_list or gap_root\n
  default_selection_params[\'node_category\'] = gap_list or gap_root\n
\n
if mirror_section_category_list:\n
  params[\'mirror_section_category\'] = mirror_section_category_list\n
  default_selection_params[\'mirror_section_category\'] =\\\n
        mirror_section_category_list\n
\n
report_section_list = []\n
\n
existing_section_dict = dict()\n
\n
# group by node\n
# movements in the period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=account_type_to_group_by_node,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            from_date=from_date,\n
                            at_date=at_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_mirror_section=0,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, None, None)\n
  existing_section_dict[key] = True\n
  \n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = from_date\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = None\n
  selection_params.setdefault(\'mirror_section_uid\', None)\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      selection_columns=account_columns,\n
                      listbox_display_mode=\'FlatListMode\',))\n
\n
# non zero balance at begining of period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=account_type_to_group_by_node,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            at_date=from_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_mirror_section=0,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, None, None)\n
  if key in existing_section_dict:\n
    continue\n
  if not inventory.total_price:\n
    continue\n
  existing_section_dict[key] = True\n
  \n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = from_date\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = None\n
  selection_params.setdefault(\'mirror_section_uid\', None)\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      selection_columns=account_columns,\n
                      listbox_display_mode=\'FlatListMode\',))\n
\n
\n
# profit & loss -> same, but from date limited to the current period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=profit_and_loss_account_type,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            from_date=max(from_date, period_start_date),\n
                            at_date=at_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_mirror_section=0,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, None, None)\n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = max(from_date, period_start_date)\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'period_start_date\'] = max(from_date, period_start_date)\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = None\n
  selection_params.setdefault(\'mirror_section_uid\', None)\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      selection_columns=account_columns,\n
                      listbox_display_mode=\'FlatListMode\',))\n
\n
# group by mirror_section\n
# movements in the period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=account_type_to_group_by_mirror_section,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            from_date=from_date,\n
                            at_date=at_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_mirror_section=1,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, inventory.mirror_section_uid, None)\n
  existing_section_dict[key] = True\n
\n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = from_date\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = None\n
  selection_params[\'mirror_section_uid\'] = inventory.mirror_section_uid\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      selection_columns=account_columns,\n
                      listbox_display_mode=\'FlatListMode\',))\n
\n
# non zero balance at begining of period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=account_type_to_group_by_mirror_section,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            at_date=from_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_mirror_section=1,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, inventory.mirror_section_uid, None)\n
\n
  if key in existing_section_dict:\n
    continue\n
  if not inventory.total_price:\n
    continue\n
  existing_section_dict[key] = True\n
\n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = from_date\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = None\n
  selection_params[\'mirror_section_uid\'] = inventory.mirror_section_uid\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      selection_columns=account_columns,\n
                      listbox_display_mode=\'FlatListMode\',))\n
\n
\n
# group by payment\n
# movements in the period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=account_type_to_group_by_payment,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            from_date=from_date,\n
                            at_date=at_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_payment=1,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, None, inventory.payment_uid)\n
  existing_section_dict[key] = True\n
\n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = from_date\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = inventory.payment_uid\n
  selection_params.setdefault(\'mirror_section_uid\', None)\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      selection_columns=account_columns,\n
                      listbox_display_mode=\'FlatListMode\',))\n
\n
# non zero balance at begining of period\n
for inventory in portal.portal_simulation.getInventoryList(\n
                            node_category_strict_membership=account_type_to_group_by_payment,\n
                            portal_type=portal.getPortalAccountingMovementTypeList(),\n
                            at_date=from_date,\n
                            group_by_node=1,\n
                            group_by_section=0,\n
                            group_by_payment=1,\n
                            group_by_resource=0,\n
                            **params):\n
  key = (inventory.node_relative_url, None, inventory.payment_uid)\n
  if key in existing_section_dict:\n
    continue\n
  if not inventory.total_price:\n
    continue\n
  existing_section_dict[key] = True\n
\n
  selection_params = default_selection_params.copy()\n
  selection_params[\'from_date\'] = from_date\n
  selection_params[\'at_date\'] = at_date\n
  selection_params[\'node_uid\'] = inventory.node_uid\n
  selection_params[\'payment_uid\'] = inventory.payment_uid\n
  selection_params.setdefault(\'mirror_section_uid\', None)\n
  report_section_list.append(\n
              ReportSection(\n
                      path=inventory.node_relative_url,\n
                      title=getFullAccountName(key),\n
                      form_id=\'Account_viewAccountingTransactionList\',\n
                      selection_name=\'account_preference_selection\',\n
                      selection_params=selection_params,\n
                      listbox_display_mode=\'FlatListMode\',\n
                      selection_columns=account_columns, ))\n
\n
report_section_list.sort(key=ReportSection.getTitle)\n
\n
total_params = default_selection_params.copy()\n
total_params[\'at_date\'] = at_date\n
report_section_list.append(ReportSection(\n
              path=context.getPhysicalPath(),\n
              title=Base_translateString("Total"),\n
              form_id=\'AccountModule_viewGeneralLedgerSummary\',\n
              selection_name=\'accounting_report_selection\',\n
              selection_params=total_params))\n
\n
return report_section_list\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string></string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>AccountModule_getGeneralLedgerReportSectionList</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
