<?xml version="1.0"?>
<ZopeData>
  <record id="1" aka="AAAAAAAAAAE=">
    <pickle>
      <global name="PythonScript" module="Products.PythonScripts.PythonScript"/>
    </pickle>
    <pickle>
      <dictionary>
        <item>
            <key> <string>Script_magic</string> </key>
            <value> <int>3</int> </value>
        </item>
        <item>
            <key> <string>_bind_names</string> </key>
            <value>
              <object>
                <klass>
                  <global name="NameAssignments" module="Shared.DC.Scripts.Bindings"/>
                </klass>
                <tuple/>
                <state>
                  <dictionary>
                    <item>
                        <key> <string>_asgns</string> </key>
                        <value>
                          <dictionary>
                            <item>
                                <key> <string>name_container</string> </key>
                                <value> <string>container</string> </value>
                            </item>
                            <item>
                                <key> <string>name_context</string> </key>
                                <value> <string>context</string> </value>
                            </item>
                            <item>
                                <key> <string>name_m_self</string> </key>
                                <value> <string>script</string> </value>
                            </item>
                            <item>
                                <key> <string>name_subpath</string> </key>
                                <value> <string>traverse_subpath</string> </value>
                            </item>
                          </dictionary>
                        </value>
                    </item>
                  </dictionary>
                </state>
              </object>
            </value>
        </item>
        <item>
            <key> <string>_body</string> </key>
            <value> <string encoding="cdata"><![CDATA[

from Products.Formulator.Errors import FormValidationError\n
from Products.DCWorkflow.DCWorkflow import ValidationFailed\n
from Products.ERP5Type.Message import translateString\n
from Products.ERP5Type.Log import log\n
portal = context.getPortalObject()\n
request=context.REQUEST\n
\n
form = getattr(context, dialog_id)\n
\n
# Validate the form\n
try:\n
  # It is necessary to force editable_mode before validating\n
  # data. Otherwise, field appears as non editable.\n
  # This is the pending of form_dialog.\n
  editable_mode = request.get(\'editable_mode\', 1)\n
  request.set(\'editable_mode\', 1)\n
  form.validate_all_to_request(request)\n
  request.set(\'editable_mode\', editable_mode)\n
except FormValidationError, validation_errors:\n
  # Pack errors into the request\n
  field_errors = form.ErrorFields(validation_errors)\n
  request.set(\'field_errors\', field_errors)\n
  return form(request)\n
\n
# XXX: this is a duplication from form validation code in Base_callDialogMethod\n
# Correct fix is to factorise this script with Base_callDialogMethod, not to\n
# fix XXXs here.\n
doaction_param_list = {}\n
MARKER = []\n
for f in form.get_fields():\n
  k = f.id\n
  v = getattr(request, k, MARKER)\n
  if v is not MARKER:\n
    if k.startswith(\'your_\'):\n
      k=k[5:]\n
    elif k.startswith(\'my_\'): # compat\n
      k=k[3:]\n
    doaction_param_list[k] = v\n
\n
listbox = request.get(\'listbox\') # XXX: hardcoded field name\n
if listbox is not None:\n
  listbox_line_list = []\n
  for key, value in sorted(listbox.iteritems()):\n
    value[\'listbox_key\'] = key\n
    listbox_line_list.append(value)\n
  doaction_param_list[\'listbox\'] = tuple(listbox_line_list)\n
\n
try:\n
  context.portal_workflow.doActionFor(\n
    context,\n
    doaction_param_list[\'workflow_action\'],\n
    **doaction_param_list)\n
except ValidationFailed, error_message:\n
  if getattr(error_message, \'msg\', None):\n
    # use of Message class to store message+mapping+domain\n
    message = error_message.msg\n
    if same_type(message, []):\n
      message = \'. \'.join(\'%s\' % x for x in message)\n
    else:\n
      message = str(message)\n
  else:\n
    message = str(error_message)\n
  if len(message) > 2000: # too long message will generate a too long URI\n
                          # that would become an error.\n
    log("Status message has been truncated")\n
    message = "%s ..." % message[:(2000 - 4)]\n
else:\n
  message = request.get(\'portal_status_message\')\n
  if message is None:\n
    message = translateString(\'Status changed.\')\n
  kw.clear() # useful ?\n
\n
# Allow to redirect to another document\n
redirect_document_path = request.get(\'redirect_document_path\', None)\n
if redirect_document_path:\n
  redirect_document = portal.restrictedTraverse(redirect_document_path)\n
  form_id = \'view\'\n
else:\n
  redirect_document = context\n
\n
return redirect_document.Base_redirect(form_id,\n
                keep_items={\'portal_status_message\': message}, **kw)\n


]]></string> </value>
        </item>
        <item>
            <key> <string>_params</string> </key>
            <value> <string>form_id, dialog_id, **kw</string> </value>
        </item>
        <item>
            <key> <string>id</string> </key>
            <value> <string>Workflow_statusModify</string> </value>
        </item>
      </dictionary>
    </pickle>
  </record>
</ZopeData>
